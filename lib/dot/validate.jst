{{ /**
    * schema compilation (render) time:
    * it = { schema, RULES, _validate, opts }
    * it.validate - this template function,
    *   it is used recursively to generate code for subschemas
    *
    * runtime:
    * "validate" is a variable name to which this function will be assigned
    * validateRef etc. are defined in the parent scope in index.js
    */ 

  /* TODO do not clear _out */
  it.gen._out = "";

  it.checkUnknownKeywords(it);

  if (it.isTop) it.startFunction(it);

  if (typeof it.schema == 'boolean' || !it.util.schemaHasRules(it.schema, it.RULES.all)) {
    it.booleanOrEmptySchema(it);
    return it.gen._out;
  }

  if (it.isTop) {
    var $top = it.isTop
      , $lvl = it.level;

    it.updateTopContext(it);
    it.checkNoDefault(it);
    it.initializeTop(it);
  } else {
    var $lvl = it.level;

    it.updateContext(it);
    it.checkAsync(it);
    it.gen.code(`var errs_${$lvl} = errors;`);
  }

  it.checkRefsAndKeywords(it);
  if (it.opts.$comment && it.schema.$comment) {
    it.commentKeyword(it)
  }

  const types = it.getSchemaTypes(it);
  const checkedTypes = it.coerceAndCheckDataType(it, types);
  it.schemaKeywords(it, types, !checkedTypes, $top);

  if ($top) it.endFunction(it);
  else it.gen.code(`var valid${$lvl} = errors === errs_${$lvl};`);

  return it.gen._out;
}}

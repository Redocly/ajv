interface ContextConstructorArgument {
  ajv: any
  schema: any
  isRoot: boolean
  baseId: string
}

export default class SchemaCompilationContext {
  isTop?: boolean = true
  async: boolean
  schema: any
  isRoot: boolean
  baseId: string

  // TODO ajv type
  constructor({ajv, schema, isRoot, baseId}: ContextConstructorArgument) {
    this.async = schema.$async === true
    this.schema = schema
    this.isRoot = isRoot
    this.baseId = baseId
  }
}


// root: _root,
// schemaPath: "",
// errSchemaPath: "#",
// errorPath: '""',
// dataPathArr: [""],
// level: 0,
// dataLevel: 0,
// data: "data", // TODO get unique name when passed from applicator keywords
// gen: new CodeGen(),
// MissingRefError,
// RULES: RULES,
// validate: validateCode,
// util: util,
// resolve: resolve,
// resolveRef: resolveRef,
// usePattern: usePattern,
// useDefault: useDefault,
// useCustomRule: useCustomRule,
// opts: opts,
// formats: formats,
// logger: self.logger,
// self: self,


// level: number
// dataLevel: number
// data: string
// dataPathArr: string[]
// schemaPath: string
// errorPath: string
// errSchemaPath: string
// gen: CodeGen
// createErrors?: boolean // TODO maybe remove later
// opts: Options
// formats: {
//   [index: string]: Format | undefined
// }
// // keywords: {
// //   [index: string]: KeywordDefinition | undefined
// // }
// compositeRule?: boolean
// validate: (it: CompilationContext) => string
// usePattern: (str: string) => string
// useDefault: (value: any) => string
// useCustomRule: (rule: Rule, schema: any, parentSchema: object, it: CompilationContext) => any
// util: object // TODO
// self: object // TODO
// RULES: ValidationRules
// logger: Logger // TODO ?
// isTop: boolean // TODO ?
// root: SchemaRoot // TODO ?
// rootId?: string // TODO ?
// MissingRefError: typeof MissingRefError
// resolve: any
// resolveRef: (...args: any[]) => any